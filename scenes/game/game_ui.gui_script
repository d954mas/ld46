local COMMON = require "libs.common"
local WORLD = require "model.world"

---@class InventoryCellVH
---@field root node
---@field icon node

---@class GameUIGuiScript
local Script = COMMON.new_n28s()

---@return InventoryCellVH
function Script:bind_inventory_cell_vh(id)
	local root_name = "inventory/cell_" .. id
	return {
		root = assert(gui.get_node(root_name .. "/root")),
		icon = assert(gui.get_node(root_name .. "/icon"))
	}
end

function Script:bind_vh()
	self.vh = {
		mouse_follow = {
			root = gui.get_node("mouse_follow"),
			text = gui.get_node("mouse_follow/text"),
			icon_base = gui.get_node("mouse_follow/icon_base"),
			icon_info = gui.get_node("mouse_follow/icon_info"),
			icon_speech = gui.get_node("mouse_follow/icon_speech"),
			icon_action = gui.get_node("mouse_follow/icon_action"),
			icon_take = gui.get_node("mouse_follow/icon_take"),
		},
		inventory = {
			root = gui.get_node("inventory"),
			---@type InventoryCellVH[]
			cells = {}
		},
		icon_active = {
			root = nil,
			pos_delta = vmath.vector3()
		}
	}
	for i = 1, 8 do
		self.vh.inventory.cells[i] = self:bind_inventory_cell_vh(i)
	end
	self.view = {

	}
end

---@param object RoomObject
function Script:set_icon(object)
	gui.set_enabled(self.vh.mouse_follow.icon_base, false)
	gui.set_enabled(self.vh.mouse_follow.icon_info, false)
	gui.set_enabled(self.vh.mouse_follow.icon_speech, false)
	gui.set_enabled(self.vh.mouse_follow.icon_action, false)
	gui.set_enabled(self.vh.mouse_follow.icon_take, false)
	if (not object) then gui.set_enabled(self.vh.mouse_follow.icon_base, true)
	else
		if (object.speech) then gui.set_enabled(self.vh.mouse_follow.icon_speech, true) end
		if (object.action) then gui.set_enabled(self.vh.mouse_follow.icon_action, true) end
		if (object.info) then gui.set_enabled(self.vh.mouse_follow.icon_info, true) end
		if (object.take) then gui.set_enabled(self.vh.mouse_follow.icon_take, true) end
	end
end

function Script:init_gui()
	gui.set_render_order(2)
end

function Script:init()
	COMMON.input_acquire()
	COMMON.CONTEXT:register(COMMON.CONTEXT.NAMES.GAME_UI, self)
	self:bind_vh()
	self:init_gui()
	self:set_icon(nil)
	---@type InventoryCellVH
	self.inventory_cell_over = nil
	---@type InventoryCellVH
	self.inventory_cell_active = nil
end

function Script:update_inventory()
	for i, cell in ipairs(self.vh.inventory.cells) do
		local object = WORLD.inventory[i]
		gui.play_flipbook(cell.icon, object and object.icon or COMMON.HASHES.EMPTY)

	end
end

function Script:update(dt)
	self:update_inventory()
end

function Script:final()
	COMMON.CONTEXT:unregister(COMMON.CONTEXT.NAMES.GAME_UI)
	COMMON.input_release()
end

---@param object RoomObject
function Script:room_set_over_object(object, force)
	if (not WORLD.room_can_click) then object = nil end
	if (self.object_over == object and not force) then return end
	self.object_over = object
	self:set_icon(object)
	if (object) then
		self:mouse_follow_set_text(object.config.id)
	else
		self:mouse_follow_set_text("")
	end

end

function Script:mouse_follow_set_text(text)
	gui.set_text(self.vh.mouse_follow.text, text)
end

function Script:on_input(action_id, action)
	if (action_id == nil or action_id == COMMON.HASHES.INPUT.TOUCH) then
		gui.set_position(self.vh.mouse_follow.root, vmath.vector3(action.x, action.y, 0))
	end

	if action_id == nil or action_id == COMMON.HASHES.INPUT.TOUCH then
		WORLD.room_can_click = not gui.pick_node(self.vh.inventory.root, action.x, action.y)
		if (WORLD.room_can_click) then
			self:room_set_over_object(WORLD.current_room.object_over)
		else
			self:room_set_over_object(nil)
		end
		self.inventory_cell_over = nil
		self.inventory_cell_over_idx = nil
		for idx, cell in ipairs(self.vh.inventory.cells) do
			if (gui.pick_node(cell.root, action.x, action.y)) then
				self.inventory_cell_over = cell
				self.inventory_cell_over_idx = idx
				break
			end
		end
	end

	if (action_id == COMMON.HASHES.INPUT.TOUCH) then
		if (action.pressed) then
			self.touch_pos = vmath.vector3(action.x, action.y, 0)
			local object = WORLD.inventory[self.inventory_cell_over_idx]
			if (object) then
				self.inventory_cell_active = self.inventory_cell_over
				self.vh.icon_active.root = gui.clone(self.inventory_cell_active.icon)

				self.vh.icon_active.pos_delta.x = gui.get_position(self.vh.icon_active.root).x - action.x
				self.vh.icon_active.pos_delta.y = gui.get_position(self.vh.icon_active.root).y - action.y
				gui.set_enabled(self.inventory_cell_active.icon, false)
				WORLD.active_object = object
			end
		end
		if (action.released) then
			if (self.inventory_cell_active) then
				gui.set_enabled(self.inventory_cell_active.icon, true)
				gui.delete_node(self.vh.icon_active.root)
				self.vh.icon_active.root = nil
			end
			self.inventory_cell_active = nil
			WORLD.active_object = nil
		end
	end

	if (WORLD.active_object) then
		self:mouse_follow_set_text("active object:" .. WORLD.active_object.id)
		gui.set_position(self.vh.icon_active.root, vmath.vector3(action.x + self.vh.icon_active.pos_delta.x, action.y + self.vh.icon_active.pos_delta.y, 0))
	else
		self:room_set_over_object(WORLD.current_room.object_over,true)
	end
end

COMMON.N28S.register(Script())